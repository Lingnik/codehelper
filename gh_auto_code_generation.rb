require_relative 'github_client'
require_relative 'gh_generate_code_from_issue'
require_relative 'openai_client'
require 'fileutils'

your_username = ARGV[0]
repo_name = ARGV[1]

api_key = ENV['GITHUB_API_KEY']
gh_client = GitHubClient.new(api_key)

def generate_script_file(issue_title, file_paths)
  script_file_name = issue_title.split.join("_").downcase + "_script.rb"
  code = file_paths.map { |path| File.read(path) }.join("\n")
  prompt = <<-PROMPT
#{code}

Please provide a script to run all the functions in the correct order to complete the '#{issue_title}' task.
  PROMPT

  script = @openai_client.generate_code(prompt, max_tokens = 2048, n = 1, stop = "\n", temperature = 0.5, max_attempts = 5)

  File.write(script_file_name, script)
  puts "Generated script file '#{script_file_name}'"
end

def auto_generate_code(api_key, your_username, repo_name)
  approved_issues = gh_client.get_approved_issues("#{your_username}/#{repo_name}")

  approved_issues.each do |issue|
    issue_number = issue[:number]
    puts "Generating code for approved issue ##{issue_number}..."

    # Clone the repository locally
    local_repo_path = "#{your_username}_#{repo_name}_#{issue_number}"
    FileUtils.rm_rf(local_repo_path) if Dir.exist?(local_repo_path)
    gh_client.clone_repository("#{your_username}/#{repo_name}", local_repo_path)

    # Create a new branch for the issue
    branch_name = "issue_#{issue_number}_autogenerated_code"
    gh_client.create_branch(local_repo_path, branch_name)

    # Generate code and commit
    generate_code_from_issue(your_username, repo_name, issue_number, local_repo_path)
    gh_client.commit_changes(local_repo_path, "Auto-generated code for issue ##{issue_number}")

    # Push the new branch to the remote repository
    gh_client.push_branch(local_repo_path, your_username, repo_name, branch_name)

    # Create a pull request
    pr_title = "Auto-generated code for issue ##{issue_number}"
    gh_client.create_pull_request("#{your_username}/#{repo_name}", branch_name, 'main', pr_title)

    FileUtils.rm_rf(local_repo_path)
  end
end

